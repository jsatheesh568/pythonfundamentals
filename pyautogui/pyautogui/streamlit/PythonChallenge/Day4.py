import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd

# Page configuration
st.set_page_config(
    page_title="BMI Calculator | BMI роХрогроХрпНроХрпАроЯрпБ",
    page_icon="тЪЦя╕П",
    layout="wide"
)

# Language dictionary
LANGUAGES = {
    'english': {
        'title': 'тЪЦя╕П BMI Calculator & Health Guide',
        'subtitle': 'Calculate your Body Mass Index and get personalized health insights',
        'select_language': 'Select Language',
        'weight_label': 'Weight (kg)',
        'height_label': 'Height (cm)',
        'calculate_btn': 'Calculate BMI',
        'your_bmi': 'Your BMI',
        'bmi_category': 'BMI Category',
        'health_status': 'Health Status',
        'underweight': 'Underweight',
        'normal': 'Normal Weight',
        'overweight': 'Overweight',
        'obese': 'Obese',
        'health_tips_title': 'ЁЯТб Health Tips',
        'bmi_meter_title': 'ЁЯУК BMI Meter',
        'health_videos_title': 'ЁЯОе Health & Fitness Videos',
        'tips': {
            'underweight': [
                "ЁЯН╜я╕П Eat frequent, nutrient-dense meals",
                "ЁЯеЬ Include healthy fats like nuts and avocados",
                "ЁЯПЛя╕П Focus on strength training exercises",
                "ЁЯТз Stay hydrated and get adequate sleep",
                "ЁЯСитАНтЪХя╕П Consult a healthcare provider for personalized advice"
            ],
            'normal': [
                "ЁЯОп Maintain your current healthy weight",
                "ЁЯеЧ Continue eating a balanced diet",
                "ЁЯПГтАНтЩВя╕П Stay active with regular exercise",
                "ЁЯШ┤ Get 7-9 hours of quality sleep",
                "ЁЯзШтАНтЩАя╕П Manage stress through relaxation techniques"
            ],
            'overweight': [
                "ЁЯНО Focus on portion control and mindful eating",
                "ЁЯЪ╢тАНтЩАя╕П Increase daily physical activity",
                "ЁЯед Limit sugary drinks and processed foods",
                "ЁЯУ▒ Track your food intake and exercise",
                "ЁЯСе Consider joining a support group or program"
            ],
            'obese': [
                "ЁЯСитАНтЪХя╕П Consult with healthcare professionals",
                "ЁЯОп Set realistic, gradual weight loss goals",
                "ЁЯН╜я╕П Create a structured meal plan",
                "ЁЯТк Start with low-impact exercises",
                "ЁЯза Address emotional eating patterns"
            ]
        }
    },
    'tamil': {
        'title': 'тЪЦя╕П BMI роХрогроХрпНроХрпАроЯрпБ рооро▒рпНро▒рпБроорпН роЖро░рпЛроХрпНроХро┐роп ро╡ро┤ро┐роХро╛роЯрпНроЯро┐',
        'subtitle': 'роЙроЩрпНроХро│рпН роЙроЯро▓рпН роиро┐ро▒рпИ роХрпБро▒ро┐ропрпАроЯрпНроЯрпИ роХрогроХрпНроХро┐роЯрпНроЯрпБ родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро░рпЛроХрпНроХро┐роп родроХро╡ро▓рпНроХро│рпИрокрпН рокрпЖро▒рпБроЩрпНроХро│рпН',
        'select_language': 'роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН',
        'weight_label': 'роОроЯрпИ (роХро┐ро▓рпЛ)',
        'height_label': 'роЙропро░роорпН (роЪрпЖ.роорпА)',
        'calculate_btn': 'BMI роХрогроХрпНроХро┐роЯрпБ',
        'your_bmi': 'роЙроЩрпНроХро│рпН BMI',
        'bmi_category': 'BMI ро╡роХрпИ',
        'health_status': 'роЖро░рпЛроХрпНроХро┐роп роиро┐ро▓рпИ',
        'underweight': 'роХрпБро▒рпИро╡ро╛рой роОроЯрпИ',
        'normal': 'роЪро╛родро╛ро░рог роОроЯрпИ',
        'overweight': 'роЕродро┐роХ роОроЯрпИ',
        'obese': 'роЙроЯро▓рпНрокро░рпБрооройрпН',
        'health_tips_title': 'ЁЯТб роЖро░рпЛроХрпНроХро┐роп роХрпБро▒ро┐рокрпНрокрпБроХро│рпН',
        'bmi_meter_title': 'ЁЯУК BMI роорпАроЯрпНроЯро░рпН',
        'health_videos_title': 'ЁЯОе роЖро░рпЛроХрпНроХро┐ропроорпН & роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ ро╡рпАроЯро┐ропрпЛроХрпНроХро│рпН',
        'tips': {
            'underweight': [
                "ЁЯН╜я╕П роЕроЯро┐роХрпНроХроЯро┐ роЪродрпНродрпБро│рпНро│ роЙрогро╡рпБроХро│рпН роЙрогрпНрогрпБроЩрпНроХро│рпН",
                "ЁЯеЬ роироЯрпНро╕рпН рооро▒рпНро▒рпБроорпН ро╡рпЖрогрпНрогрпЖропрпН рокро┤роорпН рокрпЛройрпНро▒ роЖро░рпЛроХрпНроХро┐ропрооро╛рой роХрпКро┤рпБрокрпНрокрпБроХро│рпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН",
                "ЁЯПЛя╕П ро╡ро▓ро┐роорпИ рокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
                "ЁЯТз роирпАро░рпН роЕро░рпБроирпНродрпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН рокрпЛродрпБрооро╛рой родрпВроХрпНроХроорпН рокрпЖро▒рпБроЩрпНроХро│рпН",
                "ЁЯСитАНтЪХя╕П родройро┐рокрпНрокропройро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИроХрпНроХрпБ рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН"
            ],
            'normal': [
                "ЁЯОп роЙроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп роЖро░рпЛроХрпНроХро┐ропрооро╛рой роОроЯрпИропрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН",
                "ЁЯеЧ роЪроороЪрпНроЪрпАро░рпН роЙрогро╡рпИ родрпКроЯро░рпНроирпНродрпБ роЙрогрпНрогрпБроЩрпНроХро│рпН",
                "ЁЯПГтАНтЩВя╕П ро╡ро┤роХрпНроХрооро╛рой роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ропрпБроЯройрпН роЪрпБро▒рпБроЪрпБро▒рпБрокрпНрокро╛роХ роЗро░рпБроЩрпНроХро│рпН",
                "ЁЯШ┤ 7-9 роорогро┐роирпЗро░ родро░рооро╛рой родрпВроХрпНроХроорпН рокрпЖро▒рпБроЩрпНроХро│рпН",
                "ЁЯзШтАНтЩАя╕П родро│ро░рпНро╡рпБ роирпБроЯрпНрокроЩрпНроХро│рпН роорпВро▓роорпН роорой роЕро┤рпБродрпНродродрпНродрпИ роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН"
            ],
            'overweight': [
                "ЁЯНО рокроХрпБродро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ рооро▒рпНро▒рпБроорпН роХро╡ройродрпНродрпБроЯройрпН роЙрогрпНрогрпБродро▓ро┐ро▓рпН роХро╡ройроорпН роЪрпЖро▓рпБродрпНродрпБроЩрпНроХро│рпН",
                "ЁЯЪ╢тАНтЩАя╕П родро┐ройроЪро░ро┐ роЙроЯро▓рпН роЪрпЖропро▓рпНрокро╛роЯрпНроЯрпИ роЕродро┐роХро░ро┐роХрпНроХро╡рпБроорпН",
                "ЁЯед роЪро░рпНроХрпНроХро░рпИ рокро╛ройроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН рокродрокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯ роЙрогро╡рпБроХро│рпИ роХрпБро▒рпИроХрпНроХро╡рпБроорпН",
                "ЁЯУ▒ роЙроЩрпНроХро│рпН роЙрогро╡рпБ роЙроЯрпНроХрпКро│рпНро│ро▓рпН рооро▒рпНро▒рпБроорпН роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ропрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН",
                "ЁЯСе роЖродро░ро╡рпБ роХрпБро┤рпБ роЕро▓рпНро▓родрпБ родро┐роЯрпНроЯродрпНродро┐ро▓рпН роЪрпЗро░рпБро╡родрпИ роХро░рпБродрпНродро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН"
            ],
            'obese': [
                "ЁЯСитАНтЪХя╕П роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпНроХро│рпБроЯройрпН роЖро▓рпЛроЪройрпИ рокрпЖро▒рпБроЩрпНроХро│рпН",
                "ЁЯОп ропродро╛ро░рпНродрпНродрооро╛рой, рокроЯро┐рокрпНрокроЯро┐ропро╛рой роОроЯрпИ роЗро┤рокрпНрокрпБ роЗро▓роХрпНроХрпБроХро│рпИ роЕроорпИроХрпНроХро╡рпБроорпН",
                "ЁЯН╜я╕П роХроЯрпНроЯроорпИроХрпНроХрокрпНрокроЯрпНроЯ роЙрогро╡рпБ родро┐роЯрпНроЯродрпНродрпИ роЙро░рпБро╡ро╛роХрпНроХро╡рпБроорпН",
                "ЁЯТк роХрпБро▒рпИроирпНрод родро╛роХрпНроХ роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐роХро│рпБроЯройрпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН",
                "ЁЯза роЙрогро░рпНроЪрпНроЪро┐ роЪро╛ро░рпНроирпНрод роЙрогро╡рпБ роорпБро▒рпИроХро│рпИ роХрпИропро╛ро│рпБроЩрпНроХро│рпН"
            ]
        }
    }
}

# YouTube video recommendations
HEALTH_VIDEOS = {
    'english': [
        {'title': 'Complete Beginner Home Workout', 'id': 'ml6cT4AZdqI'},
        {'title': '10 Minute Morning Yoga', 'id': 'VaoV1PrYft4'},
        {'title': 'Healthy Meal Prep Ideas', 'id': 'sOXB8tAVC3M'},
        {'title': 'BMI Explained by Doctor', 'id': 'J2FCBBhMYW4'},
        {'title': '30 Day Fitness Challenge', 'id': 'TKt_gk5wCTg'}
    ],
    'tamil': [
        {'title': 'родрооро┐ро┤ро┐ро▓рпН ропрпЛроХро╛ рокропро┐ро▒рпНроЪро┐', 'id': 'kJF_W8TClsw'},
        {'title': 'ро╡рпАроЯрпНроЯро┐ро▓рпН роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐', 'id': 'MLXzRuJfQpA'},
        {'title': 'роЖро░рпЛроХрпНроХро┐ропрооро╛рой роЙрогро╡рпБ', 'id': 'zJ8HE6kh7T8'},
        {'title': 'роОроЯрпИ роХрпБро▒рпИрокрпНрокрпБ роЯро┐рокрпНро╕рпН', 'id': '7TlNz6WBaJE'},
        {'title': 'рокро╛ро░роорпНрокро░ро┐роп родрооро┐ро┤рпН роЙрогро╡рпБ', 'id': 'WHq5P8xvBZY'}
    ]
}

def calculate_bmi(weight, height_cm):
    """Calculate BMI from weight (kg) and height (cm)"""
    height_m = height_cm / 100
    bmi = weight / (height_m ** 2)
    return round(bmi, 1)

def get_bmi_category(bmi, lang):
    """Get BMI category and color"""
    lang_data = LANGUAGES[lang]
    if bmi < 18.5:
        return lang_data['underweight'], '#3498db', 'underweight'
    elif 18.5 <= bmi < 25:
        return lang_data['normal'], '#2ecc71', 'normal'
    elif 25 <= bmi < 30:
        return lang_data['overweight'], '#f39c12', 'overweight'
    else:
        return lang_data['obese'], '#e74c3c', 'obese'

def create_bmi_meter(bmi, lang):
    """Create BMI meter visualization"""
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = bmi,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': LANGUAGES[lang]['bmi_meter_title']},
        delta = {'reference': 22.5},  # Ideal BMI
        gauge = {
            'axis': {'range': [None, 40]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 18.5], 'color': "lightcyan"},
                {'range': [18.5, 25], 'color': "lightgreen"},
                {'range': [25, 30], 'color': "lightyellow"},
                {'range': [30, 40], 'color': "lightcoral"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 30
            }
        }
    ))
    
    fig.update_layout(height=400)
    return fig

def create_bmi_range_chart():
    """Create BMI range visualization"""
    data = {
        'Category': ['Underweight', 'Normal', 'Overweight', 'Obese'],
        'Min BMI': [0, 18.5, 25, 30],
        'Max BMI': [18.5, 25, 30, 40],
        'Color': ['#3498db', '#2ecc71', '#f39c12', '#e74c3c']
    }
    
    fig = px.bar(
        x=['Underweight', 'Normal Weight', 'Overweight', 'Obese'],
        y=[18.5, 6.5, 5, 10],
        color=['#3498db', '#2ecc71', '#f39c12', '#e74c3c'],
        title="BMI Ranges"
    )
    fig.update_layout(showlegend=False, height=300)
    return fig

# Main app
def main():
    # Language selection
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        selected_lang = st.selectbox(
            "ЁЯМР Select Language | роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
            ['english', 'tamil'],
            format_func=lambda x: "English ЁЯЗ║ЁЯЗ╕" if x == 'english' else "родрооро┐ро┤рпН ЁЯЗоЁЯЗ│"
        )
    
    lang_data = LANGUAGES[selected_lang]
    
    # Header
    st.title(lang_data['title'])
    st.markdown(f"*{lang_data['subtitle']}*")
    st.divider()
    
    # Main content
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("ЁЯУП BMI Calculator")
        
        # Input fields
        weight = st.number_input(
            lang_data['weight_label'],
            min_value=1.0,
            max_value=300.0,
            value=70.0,
            step=0.1,
            help="Enter your weight in kilograms"
        )
        
        height = st.number_input(
            lang_data['height_label'],
            min_value=50.0,
            max_value=250.0,
            value=170.0,
            step=0.1,
            help="Enter your height in centimeters"
        )
        
        if st.button(lang_data['calculate_btn'], type="primary"):
            bmi = calculate_bmi(weight, height)
            category, color, cat_key = get_bmi_category(bmi, selected_lang)
            
            # Store in session state
            st.session_state.bmi = bmi
            st.session_state.category = category
            st.session_state.color = color
            st.session_state.cat_key = cat_key
            st.session_state.lang = selected_lang
    
    with col2:
        if hasattr(st.session_state, 'bmi'):
            st.subheader("ЁЯУК Results")
            
            # BMI Result
            st.metric(
                label=lang_data['your_bmi'],
                value=f"{st.session_state.bmi}",
                delta=f"{st.session_state.bmi - 22.5:.1f} from ideal"
            )
            
            # Category with color
            st.markdown(f"""
            <div style="padding: 10px; background-color: {st.session_state.color}20; 
                        border-left: 4px solid {st.session_state.color}; margin: 10px 0;">
                <strong>{lang_data['bmi_category']}:</strong> {st.session_state.category}
            </div>
            """, unsafe_allow_html=True)
    
    # BMI Meter
    if hasattr(st.session_state, 'bmi'):
        st.subheader(lang_data['bmi_meter_title'])
        fig_meter = create_bmi_meter(st.session_state.bmi, selected_lang)
        st.plotly_chart(fig_meter, use_container_width=True)
    
    # BMI Range Chart
    st.subheader("ЁЯУИ BMI Range Reference")
    fig_range = create_bmi_range_chart()
    st.plotly_chart(fig_range, use_container_width=True)
    
    # Health Tips
    if hasattr(st.session_state, 'cat_key'):
        st.subheader(lang_data['health_tips_title'])
        tips = lang_data['tips'][st.session_state.cat_key]
        
        for tip in tips:
            st.markdown(f"тАв {tip}")
    
    # Health Videos
    st.subheader(lang_data['health_videos_title'])
    
    videos = HEALTH_VIDEOS[selected_lang]
    cols = st.columns(2)
    
    for i, video in enumerate(videos):
        with cols[i % 2]:
            st.markdown(f"""
            **{video['title']}**
            """)
            st.video(f"https://www.youtube.com/watch?v={video['id']}")
            st.markdown("---")
    
    # Footer
    st.markdown("""
    ---
    <div style='text-align: center; color: #666;'>
        <p>тЪая╕П Disclaimer: This BMI calculator is for informational purposes only. 
        Consult healthcare professionals for medical advice.</p>
        <p>ЁЯПе роЗроирпНрод BMI роХрогроХрпНроХрпАроЯрпБ родроХро╡ро▓рпН роирпЛроХрпНроХроЩрпНроХро│рпБроХрпНроХро╛роХ роороЯрпНроЯрпБроорпЗ. 
        рооро░рпБродрпНродрпБро╡ роЖро▓рпЛроЪройрпИроХрпНроХрпБ роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпНроХро│рпИ роЕрогрпБроХро╡рпБроорпН.</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main(